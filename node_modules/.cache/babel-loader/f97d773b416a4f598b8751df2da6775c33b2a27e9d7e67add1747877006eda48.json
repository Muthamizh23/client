{"ast":null,"code":"var _jsxFileName = \"C:\\\\workspace\\\\git\\\\client\\\\src\\\\Pages\\\\MostLikedPost\\\\MostLikedPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useCallback } from 'react';\n// import NavigationBar from '../../components/NavBar/NavigationBar'\nimport Post from '../../components/ShortPost/ShortPost';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MostLikedPost() {\n  _s();\n  let whichSort = useMemo(() => window.location.pathname.split('/')[1] === 'MostLikedPost' ? 'numLikes' : 'numComments',\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [window.location.pathname]);\n  const [posts, setPosts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // const [whichSort , setWhichSort] = useState()\n\n  //quick sort    time complexity  O(n*logn)\n  const swap = useCallback((items, leftIndex, rightIndex) => {\n    var temp = items[leftIndex];\n    items[leftIndex] = items[rightIndex];\n    items[rightIndex] = temp;\n  }, []);\n  const partition = useCallback((items, left, right) => {\n    var pivot = items[Math.floor((right + left) / 2)],\n      //middle element\n      i = left,\n      //left pointer\n      j = right; //right pointer\n    while (i <= j) {\n      while (items[i][whichSort] < pivot[whichSort]) {\n        i++;\n      }\n      while (items[j][whichSort] > pivot[whichSort]) {\n        j--;\n      }\n      if (i <= j) {\n        swap(items, i, j); //swap two elements\n        i++;\n        j--;\n      }\n    }\n    return i;\n  }, [swap, whichSort]);\n  const quickSort = useCallback((items, left, right) => {\n    var index;\n    if (items.length > 1) {\n      index = partition(items, left, right); //index returned from partition\n      if (left < index - 1) {\n        //more elements on the left side of the pivot\n        quickSort(items, left, index - 1);\n      }\n      if (index < right) {\n        //more elements on the right side of the pivot\n        quickSort(items, index, right);\n      }\n    }\n    return items;\n  }, [partition]);\n\n  // end of quick sort\n  const fetchPost = useCallback(async () => {\n    let data = null;\n    await fetch(\"http://localhost:9001/authors\").then(res => res.json()).then(json => {\n      console.log(json);\n      data = json;\n    }).catch(excep => {\n      console.log(excep);\n    });\n    let result = quickSort(data, 0, data.length - 1);\n    data = result.reverse().slice(0, 10);\n    // console.log(data)\n    setIsLoading(false);\n    setPosts([...data]);\n  }, [quickSort]);\n  useEffect(() => {\n    fetchPost();\n  }, [fetchPost, whichSort]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"Loading... Please Wait....\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this) : posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n          title: post.firstName,\n          like: post.numLikes,\n          date: post.datePublished,\n          id: post.id,\n          comment: post.numComments,\n          whichSort: whichSort\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n_s(MostLikedPost, \"jeWvMPFVYMuCuc1eTPqj5dxfyHk=\");\n_c = MostLikedPost;\nexport default MostLikedPost;\nvar _c;\n$RefreshReg$(_c, \"MostLikedPost\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useCallback","Post","jsxDEV","_jsxDEV","MostLikedPost","_s","whichSort","window","location","pathname","split","posts","setPosts","isLoading","setIsLoading","swap","items","leftIndex","rightIndex","temp","partition","left","right","pivot","Math","floor","i","j","quickSort","index","length","fetchPost","data","fetch","then","res","json","console","log","catch","excep","result","reverse","slice","children","className","fileName","_jsxFileName","lineNumber","columnNumber","map","post","title","firstName","like","numLikes","date","datePublished","id","comment","numComments","_c","$RefreshReg$"],"sources":["C:/workspace/git/client/src/Pages/MostLikedPost/MostLikedPost.js"],"sourcesContent":["import React, {useState, useEffect, useMemo, useCallback} from 'react'\r\n// import NavigationBar from '../../components/NavBar/NavigationBar'\r\nimport Post from '../../components/ShortPost/ShortPost'\r\nfunction MostLikedPost() {\r\n  let whichSort = useMemo(\r\n    () =>\r\n      window.location.pathname.split('/')[1] === 'MostLikedPost'\r\n        ? 'numLikes'\r\n        : 'numComments',\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [window.location.pathname],\r\n  )\r\n\r\n  const [posts, setPosts] = useState([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  // const [whichSort , setWhichSort] = useState()\r\n\r\n  //quick sort    time complexity  O(n*logn)\r\n  const swap = useCallback((items, leftIndex, rightIndex) => {\r\n    var temp = items[leftIndex]\r\n    items[leftIndex] = items[rightIndex]\r\n    items[rightIndex] = temp\r\n  }, [])\r\n\r\n  const partition = useCallback(\r\n    (items, left, right) => {\r\n      var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n        i = left, //left pointer\r\n        j = right //right pointer\r\n      while (i <= j) {\r\n        while (items[i][whichSort] < pivot[whichSort]) {\r\n          i++\r\n        }\r\n        while (items[j][whichSort] > pivot[whichSort]) {\r\n          j--\r\n        }\r\n        if (i <= j) {\r\n          swap(items, i, j) //swap two elements\r\n          i++\r\n          j--\r\n        }\r\n      }\r\n      return i\r\n    },\r\n    [swap, whichSort],\r\n  )\r\n\r\n  const quickSort = useCallback(\r\n    (items, left, right) => {\r\n      var index\r\n      if (items.length > 1) {\r\n        index = partition(items, left, right) //index returned from partition\r\n        if (left < index - 1) {\r\n          //more elements on the left side of the pivot\r\n          quickSort(items, left, index - 1)\r\n        }\r\n        if (index < right) {\r\n          //more elements on the right side of the pivot\r\n          quickSort(items, index, right)\r\n        }\r\n      }\r\n      return items\r\n    },\r\n    [partition],\r\n  )\r\n\r\n  // end of quick sort\r\n  const fetchPost = useCallback(async () => {\r\n    let data = null;\r\n    await fetch(\"http://localhost:9001/authors\")\r\n    .then((res) => res.json())\r\n    .then((json) => {\r\n      console.log(json);\r\n      data = json\r\n    }).catch((excep)=>{\r\n      console.log(excep);\r\n    })\r\n\r\n    let result = quickSort(data, 0, data.length - 1)\r\n\r\n    data = result.reverse().slice(0, 10)\r\n    // console.log(data)\r\n    setIsLoading(false)\r\n    setPosts([...data])\r\n  }, [quickSort])\r\n\r\n  useEffect(() => {\r\n    fetchPost()\r\n  }, [fetchPost, whichSort])\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <ul className=\"list-group\">\r\n          {isLoading ? (\r\n            <h1 className=\"text-center\">Loading... Please Wait....</h1>\r\n          ) : (\r\n            posts.map(post => (\r\n              <Post\r\n                key={post.id}\r\n                title={post.firstName}\r\n                like={post.numLikes}\r\n                date={post.datePublished}\r\n                id={post.id}\r\n                comment={post.numComments}\r\n                whichSort={whichSort}\r\n              />\r\n            ))\r\n          )}\r\n\r\n          {/* <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post>\r\n                    <Post></Post> */}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MostLikedPost\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}